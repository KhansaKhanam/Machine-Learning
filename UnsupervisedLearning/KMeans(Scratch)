# Your Name: Khansa Khanam Umar Sultan
# Your Studen ID: 50560596
#################################
# Coding Work1: K-means Implementation 

import numpy as np
from sklearn.datasets import load_wine
import matplotlib.pyplot as plt

class KMeans:
    def __init__(self, n_clusters=3, max_iters=100):
        """
        Initialize KMeans clustering algorithm.

        Parameters:
        - n_clusters (int): Number of clusters.
        - max_iters (int): Maximum number of iterations.
        """
        self.n_clusters = n_clusters
        self.max_iters = max_iters
        self.labels = None
        self.centroids = None
        
    @staticmethod
    def euclidean(datapoint, centroid):
        """Compute the Euclidean distance between a datapoint and a centroid."""
        return np.sqrt(np.sum((centroid - datapoint) ** 2, axis=1))
        
    def fit(self, X):
        """
        Fit KMeans to the data.

        Parameters:
        - X (array-like): Input data.
        """
        np.random.seed(42) 
        self.centroids = np.random.uniform(np.amin(X, axis=0), np.amax(X, axis=0), size=(self.n_clusters, X.shape[1]))
        
        for _ in range(self.max_iters):
            distances = np.array([KMeans.euclidean(data, self.centroids) for data in X])
            self.labels = np.argmin(distances, axis=1)

            new_centroids = np.array([X[self.labels == k].mean(axis=0) for k in range(self.n_clusters)])
            
            if np.allclose(self.centroids, new_centroids, atol=1e-3):
                break
            
            self.centroids = new_centroids
        
        return self.labels
    
def inertia(X, labels, centroids):
    """
    Calculate the inertia of KMeans clustering.

    Parameters:
    - X (array-like): Input data.
    - labels (array-like): Cluster labels.
    - centroids (array-like): Cluster centroids.

    Returns:
    - float: Inertia value.
    """
    inertia_value = 0
    for i, centroid in enumerate(centroids):
        inertia_value += np.sum((X[labels == i] - centroid) ** 2)
    return inertia_value

def visualize_clusters(X, labels, centroids):
    """
    Visualize KMeans clustering results.

    Parameters:
    - X (array-like): Input data.
    - labels (array-like): Cluster labels.
    - centroids (array-like): Cluster centroids.

    Returns:
    - None
    """

    plt.scatter(X[:, 0], X[:, 1], c=labels)
    plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', color='red')
    plt.title("K-means Clustering")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.show()

def main():
    # Load the Wine dataset
    wine = load_wine()
    # Use only the first two features for visualization
    X = wine.data[:, :2]  
    
    # Perform KMeans clustering
    kmeans = KMeans(n_clusters=3)
    kmeans.fit(X)

    # Compute inertia
    print("Inertia:", inertia(X, kmeans.labels, kmeans.centroids))

    # Visualize clusters
    visualize_clusters(X, kmeans.labels, kmeans.centroids)

if __name__ == "__main__":
    main()
